// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.language.textanalytics;

import com.azure.ai.language.textanalytics.implementation.AnalyzesImpl;
import com.azure.ai.language.textanalytics.models.AnalyzeTextTask;
import com.azure.ai.language.textanalytics.models.AnalyzeTextTaskResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous TextAnalyticsClient type. */
@ServiceClient(builder = TextAnalyticsClientBuilder.class, isAsync = true)
public final class TextAnalyticsAsyncClient {
    @Generated private final AnalyzesImpl serviceClient;

    /**
     * Initializes an instance of TextAnalyticsAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    TextAnalyticsAsyncClient(AnalyzesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Request text analysis over a collection of documents.
     *
     * <p>Submit a collection of text documents for analysis. Specify a single unique task to be executed immediately.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>showStats</td><td>Boolean</td><td>No</td><td>If set to true, response will contain request and document level statistics.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     * }
     * }</pre>
     *
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> analyzeTextWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.analyzeTextWithResponseAsync(body, requestOptions);
    }

    /**
     * Submit text analysis job
     *
     * <p>Submit a collection of text documents for analysis. Specify one or more unique tasks to be executed as a
     * long-running operation.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     displayName: String (Optional)
     *     analysisInput (Required): {
     *         documents (Required): [
     *              (Required){
     *                 id: String (Required)
     *                 text: String (Required)
     *                 language: String (Optional)
     *             }
     *         ]
     *     }
     *     tasks (Required): [
     *          (Required){
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> submitJobWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.submitJobWithResponseAsync(body, requestOptions);
    }

    /**
     * Get analysis status and results
     *
     * Get the status of an analysis job.  A job may consist of one or more tasks.  Once all tasks are succeeded, the job will transition to the succeeded state and results will be available for each task.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>top</td><td>Integer</td><td>No</td><td>The maximum number of resources to return from the collection.</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>An offset into the collection of the first resource to be returned.</td></tr>
     *     <tr><td>showStats</td><td>Boolean</td><td>No</td><td>If set to true, response will contain request and document level statistics.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     displayName: String (Optional)
     *     createdDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     lastUpdateDateTime: OffsetDateTime (Required)
     *     jobId: String (Required)
     *     status: String(notStarted/running/succeeded/partiallySucceeded/failed/cancelled/cancelling) (Required)
     *     errors (Optional): [
     *          (Optional){
     *             message: String (Required)
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveServiceNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable) (Required)
     *             details (Optional): {
     *                 String: String (Optional)
     *             }
     *             target: String (Optional)
     *             innererror (Optional): {
     *                 message: String (Required)
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 details (Optional): {
     *                     String: String (Optional)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     *     @nextLink: String (Required)
     *     tasks (Required): {
     *         completed: int (Required)
     *         failed: int (Required)
     *         inProgress: int (Required)
     *         total: int (Required)
     *         items (Optional): [
     *              (Optional){
     *                 taskName: String (Required)
     *                 lastUpdateDateTime: OffsetDateTime (Required)
     *                 status: String(notStarted/running/succeeded/partiallySucceeded/failed/cancelled/cancelling) (Required)
     *             }
     *         ]
     *     }
     *     statistics (Optional): {
     *         documentsCount: int (Required)
     *         validDocumentsCount: int (Required)
     *         erroneousDocumentsCount: int (Required)
     *         transactionsCount: long (Required)
     *     }
     * }
     * }</pre>
     *
     * @param jobId Job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an analysis job along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getJobStatusWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.getJobStatusWithResponseAsync(jobId, requestOptions);
    }

    /**
     * Cancel a long-running Text Analysis job
     *
     * <p>Cancel a long-running Text Analysis job.
     *
     * @param jobId Job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelJobWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.cancelJobWithResponseAsync(jobId, requestOptions);
    }

    /**
     * Request text analysis over a collection of documents.
     *
     * <p>Submit a collection of text documents for analysis. Specify a single unique task to be executed immediately.
     *
     * @param body The body parameter.
     * @param showStats If set to true, response will contain request and document level statistics.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AnalyzeTextTaskResult> analyzeText(AnalyzeTextTask body, Boolean showStats) {
        // Generated convenience method for analyzeTextWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (showStats != null) {
            requestOptions.addQueryParam("showStats", String.valueOf(showStats));
        }
        return analyzeTextWithResponse(BinaryData.fromObject(body), requestOptions)
                .map(Response::getValue)
                .map(protocolMethodData -> protocolMethodData.toObject(AnalyzeTextTaskResult.class));
    }

    /**
     * Request text analysis over a collection of documents.
     *
     * <p>Submit a collection of text documents for analysis. Specify a single unique task to be executed immediately.
     *
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AnalyzeTextTaskResult> analyzeText(AnalyzeTextTask body) {
        // Generated convenience method for analyzeTextWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return analyzeTextWithResponse(BinaryData.fromObject(body), requestOptions)
                .map(Response::getValue)
                .map(protocolMethodData -> protocolMethodData.toObject(AnalyzeTextTaskResult.class));
    }
}
